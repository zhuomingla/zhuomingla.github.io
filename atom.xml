<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无妄p的小站</title>
  <icon>https://zhuomingla.github.io/favicon.png</icon>
  <subtitle>无妄p的小站</subtitle>
  <link href="https://zhuomingla.github.io/atom.xml" rel="self"/>
  
  <link href="https://zhuomingla.github.io/"/>
  <updated>2024-08-11T14:00:32.483Z</updated>
  <id>https://zhuomingla.github.io/</id>
  
  <author>
    <name>无妄p</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>再会</title>
    <link href="https://zhuomingla.github.io/2024/08/11/%E5%86%8D%E4%BC%9A/"/>
    <id>https://zhuomingla.github.io/2024/08/11/%E5%86%8D%E4%BC%9A/</id>
    <published>2024-08-11T14:00:00.000Z</published>
    <updated>2024-08-11T14:00:32.483Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>与同学们的最后一次相见<br>再会了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>初恋豚鼠</title>
    <link href="https://zhuomingla.github.io/2024/08/09/%E5%88%9D%E6%81%8B%E8%B1%9A%E9%BC%A0/"/>
    <id>https://zhuomingla.github.io/2024/08/09/%E5%88%9D%E6%81%8B%E8%B1%9A%E9%BC%A0/</id>
    <published>2024-08-09T03:37:52.000Z</published>
    <updated>2024-08-09T03:39:22.012Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在朋友的怂恿下看了初恋豚鼠<br>在感动过后彻底认识到了自己人生的失败<br>今天就继续努力吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>7/14</title>
    <link href="https://zhuomingla.github.io/2024/07/14/7-14/"/>
    <id>https://zhuomingla.github.io/2024/07/14/7-14/</id>
    <published>2024-07-14T15:14:30.000Z</published>
    <updated>2024-07-14T15:30:52.858Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="虽然是生日">虽然是生日</span></h1><p>但是我们家是过农历的所以还没到(┬┬﹏┬┬)<br>发现好多动漫角色都是7月14生日啊<br><img src="/img/hentai.png"></p><img src="/img/ksm.png"><img src="/img/haimian.jpg"><p>生日快乐ヾ(≧▽≦*)o</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>总想发生什么的盛夏</title>
    <link href="https://zhuomingla.github.io/2024/07/13/%E6%80%BB%E6%83%B3%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%E7%9A%84%E7%9B%9B%E5%A4%8F/"/>
    <id>https://zhuomingla.github.io/2024/07/13/%E6%80%BB%E6%83%B3%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88%E7%9A%84%E7%9B%9B%E5%A4%8F/</id>
    <published>2024-07-13T07:16:09.000Z</published>
    <updated>2024-07-14T15:13:06.449Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="日复一日的蝉鸣">日复一日的蝉鸣</span></h1><p>毕业了，和很多人见完最后一面，期待着夏天的改变，却还是无所事事的坐着<br>这就是我现在的样貌<br>到头来，还是什么都没发生<br>不过暂且，沉浸在这首歌里吧<br>毕竟前路还长  </p><div style="display:flex;justify-content:center;"><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=998957531&bvid=BV1cx4y1R7Xp&cid=1212408403&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width:100%;height:400px;"></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>亚刻奥特曼！</title>
    <link href="https://zhuomingla.github.io/2024/07/08/%E4%BA%9A%E5%88%BB%E5%A5%A5%E7%89%B9%E6%9B%BC%EF%BC%81/"/>
    <id>https://zhuomingla.github.io/2024/07/08/%E4%BA%9A%E5%88%BB%E5%A5%A5%E7%89%B9%E6%9B%BC%EF%BC%81/</id>
    <published>2024-07-08T07:02:04.000Z</published>
    <updated>2024-07-08T07:31:33.281Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="亚刻奥特曼第一集">亚刻奥特曼第一集！！！</span></h1><p>终于看完了第一集，来说说我的感想吧<br>感觉这部氛围是轻松愉悦，非常适合小朋友观看ヾ(≧▽≦*)o<br>第一集男二的印象最深刻，本来以为是经典的傲娇，结果是一位非常可靠，有时蛮搞笑的正常人（怎么有单位不提供咖啡啊done，结果自己就带了一个咖啡机😂  </p><p>奥特曼的打戏蛮有新意的，我最喜欢的是室内的视角（虽然前几部也有过<br>没有从男主遇到奥特曼开始拍，搞得我还以为放在特别篇里了  </p><p>op和ed都非常好听！   </p><p>总而言之，如果能一直保持这个势头就好了，跑起来，优马!</p><div style="display:flex;justify-content:center">  <iframe src="https://www.bilibili.com/bangumi/media/md22100292" style="width:100%;height:350px"></iframe></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>js小型llm计划</title>
    <link href="https://zhuomingla.github.io/2024/06/28/js%E5%B0%8F%E5%9E%8Bllm%E8%AE%A1%E5%88%92/"/>
    <id>https://zhuomingla.github.io/2024/06/28/js%E5%B0%8F%E5%9E%8Bllm%E8%AE%A1%E5%88%92/</id>
    <published>2024-06-28T12:54:02.000Z</published>
    <updated>2024-06-29T14:38:30.402Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>准备照着重打一遍代码，不过是用tensorflow.js  </p><p>持续更新。</p><h1><span id="粗略理解">粗略理解</span></h1><p>首先先粗略的理解一下文本生成的原理吧，虽然非常幼稚…<br><img src="/img/trans.png"></p><p>注意力：对应两个token之间的关系<br>文本生成：根据上个token预测下一个token<br>k,q,v：k与q相对应，v作为输入，输出v2，v2又作为下一个输入…<br>所以理论上，一层注意力也是能用来生成的，只要参数够大…<br>希望没有错的太离谱。</p><h1><span id="一个js-transformer实现">一个js transformer实现</span></h1><p>在github上发现了一个有趣的项目<br><a href="https://github.com/BenjaminWegener/transformer-tfjs">transformer-tfjs</a><br>直接在浏览器里训练模型，太牛逼了，准备照着做…<br><img src="/img/tfjs.png"></p><h1><span id="归一化">归一化</span></h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">tf.util.shuffle(data)</span><br><span class="line"></span><br><span class="line">      const epsilon = tf.scalar(1e-4) // 创建一个很小的标量epsilon</span><br><span class="line">      const inputs = data.map((d) =&gt; d.horsepower)</span><br><span class="line">      const labels = data.map((d) =&gt; d.mpg)</span><br><span class="line"></span><br><span class="line">      const inputTensor = tf.tensor2d(inputs, [inputs.length, 1])</span><br><span class="line">      const labelTensor = tf.tensor2d(labels, [labels.length, 1])</span><br><span class="line"></span><br><span class="line">      const sqrt_pow_mean = inputTensor</span><br><span class="line">        .square()</span><br><span class="line">        .mean(1)</span><br><span class="line">        .sqrt()</span><br><span class="line">        .expandDims(1)</span><br><span class="line">        .add(epsilon)</span><br><span class="line">      const label_pow_mean = inputTensor</span><br><span class="line">        .square()</span><br><span class="line">        .mean(1)</span><br><span class="line">        .sqrt()</span><br><span class="line">        .expandDims(1)</span><br><span class="line">        .add(epsilon)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p> 最简单的，RMS_Norm归一化。  </p><p> 但我不是很懂mean()这个函数，沿着第1维和第2维好像都能出现结果。。。<br> （划掉）</p><p> 而且出现了未完全归一化的结果…<br> <img src="/img/RMS.png"><br>  呃…大体上是完成了吧。(还是用简单点的ba…)</p><h1><span id="data">data</span></h1> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"> //import * as assert from &#x27;assert&#x27;</span><br><span class="line">import &#123; getEncoding, encodingForModel &#125; from &#x27;js-tiktoken&#x27;</span><br><span class="line">import * as fs from &#x27;fs&#x27;</span><br><span class="line">import * as nj from &#x27;numjs&#x27;</span><br><span class="line">//import * as os from &#x27;os&#x27;</span><br><span class="line">import * as path from &#x27;path&#x27;</span><br><span class="line">//import * as tf from &#x27;@tensorflow/tfjs&#x27;</span><br><span class="line">//import &#123; fileURLToPath &#125; from &#x27;url&#x27;</span><br><span class="line"></span><br><span class="line">//const __filename = fileURLToPath(import.meta.url)</span><br><span class="line">//const __dirname = path.dirname(__filename)</span><br><span class="line">const enc = getEncoding(&#x27;gpt2&#x27;)</span><br><span class="line">//assert.strictEqual(enc.decode(enc.encode(&#x27;hello world&#x27;)), &#x27;hello world&#x27;)</span><br><span class="line"></span><br><span class="line">fs.readFile(&#x27;./night.txt&#x27;, &#x27;utf8&#x27;, (err: Error | null, content: string) =&gt; &#123;</span><br><span class="line">  if (err) &#123;</span><br><span class="line">    console.error(&#x27;Error reading file:&#x27;, err)</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(content.length)</span><br><span class="line">  const n = content.length</span><br><span class="line">  const train_data = content.slice(0, Math.floor(n * 0.8)) //切片，前80%</span><br><span class="line">  const val_data = content.slice(Math.floor(n * 0.8)) //后20%</span><br><span class="line">  let train_ids = enc.encode(train_data) //编码</span><br><span class="line">  let val_ids = enc.encode(val_data)</span><br><span class="line">  console.log(&#x27;train tokens:&#x27;, train_ids.length)</span><br><span class="line">  console.log(&#x27;val tokens:&#x27;, val_ids.length)</span><br><span class="line"></span><br><span class="line">  var train_ids_list = nj.array(train_ids, &#x27;uint16&#x27;)</span><br><span class="line">  var val_ids_list = nj.array(val_ids, &#x27;uint16&#x27;)</span><br><span class="line"></span><br><span class="line">  const trainArray = train_ids_list.tolist() // 转换为普通数组</span><br><span class="line">  const trainBuffer = Buffer.from(trainArray) // 转换为 Buffer 对象</span><br><span class="line">  const valArray = train_ids_list.tolist()</span><br><span class="line">  const valBuffer = Buffer.from(valArray)</span><br><span class="line"></span><br><span class="line">  fs.writeFileSync(path.join(&#x27;./data&#x27;, &#x27;train.bin&#x27;), trainBuffer)</span><br><span class="line"></span><br><span class="line">  fs.writeFileSync(path.join(&#x27;./data&#x27;, &#x27;val.bin&#x27;), valBuffer)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用numjs和js-tiktoken实现编码，模仿prepare.py保存为二进制。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>一个简易的llm试用</title>
    <link href="https://zhuomingla.github.io/2024/06/28/%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84llm%E8%AF%95%E7%94%A8/"/>
    <id>https://zhuomingla.github.io/2024/06/28/%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84llm%E8%AF%95%E7%94%A8/</id>
    <published>2024-06-28T03:08:31.000Z</published>
    <updated>2024-06-28T03:25:57.441Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前在bilibili看到一个简易的llm:  </p><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=1402478024&bvid=BV1hr42147xc&cid=1482912880&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>  <p>虽然没完全看懂，不过还是先试着运行一下。  </p><p>不过问题来了，我没有显卡，用cpu训练又太慢。<br>于是就打算在coloab平台上训练。  </p><p>将文件夹上传到谷歌硬盘，再在coloab中装载。<br>不知为何相对路径没有用，就用绝对路径了。(估计是我填错了)  </p><p>先准备数据集，用了自带的.</p><p>运行train.py<br><img src="/img/coloab.png">  </p><p>这里已经训练过两轮了<br>大小居然要1.7G…  </p><p>运行sample.py<br><img src="/img/sample.png"></p><p>效果还不错。</p><p>之后:学习一下架构，继续削减参数，魔改网络。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我，再生产</title>
    <link href="https://zhuomingla.github.io/2024/06/27/%E6%88%91%EF%BC%8C%E5%86%8D%E7%94%9F%E4%BA%A7/"/>
    <id>https://zhuomingla.github.io/2024/06/27/%E6%88%91%EF%BC%8C%E5%86%8D%E7%94%9F%E4%BA%A7/</id>
    <published>2024-06-27T05:47:00.000Z</published>
    <updated>2024-06-27T05:51:11.170Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="无聊的失败再演">无聊的失败再演</span></h1><p>又是无意义的展开，我的未来…<br>会如何呢，真是期待啊<br>小时候看到的，绚丽多彩的世界</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="日常" scheme="https://zhuomingla.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="日常" scheme="https://zhuomingla.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhuomingla.github.io/2024/06/27/hello-world/"/>
    <id>https://zhuomingla.github.io/2024/06/27/hello-world/</id>
    <published>2024-06-27T04:09:44.388Z</published>
    <updated>2024-06-27T06:57:53.966Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1><span id="hello-world-也是很重要的">hello world 也是很重要的</span></h1><p>保留下来作为纪念吧</p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3><span id="run-server">Run server</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3><span id="generate-static-files">Generate static files</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
